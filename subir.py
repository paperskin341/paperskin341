import socket
import logging
import random
def obtener_direccion_ip():
    try:
        # Obtener la dirección IP de la máquina local
        nombre_maquina = socket.gethostname()
        direccion_ip = socket.gethostbyname(nombre_maquina)
        return direccion_ip
    except Exception as e:
        #print("No se pudo obtener la dirección IP:", str(e))
        return None

# Obtener y mostrar la dirección IP de la máquina
direccion_ip = obtener_direccion_ip()
if direccion_ip is not None:
    print()

    from selenium import webdriver #imprtando libreria de selenium
    from selenium.webdriver.support.ui import Select #para los Select 
    import time
    import ipaddress
    from colorama import init#importando colores
    from termcolor import colored, cprint
    import string
    from pyfiglet import Figlet # Paraa ser uso de lectura y escritura de archivos
    #la apariencia del navegdor y opciones esteticas
    import random
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.common.by import By
    from selenium.webdriver.chrome.service import Service as ChromeService
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.common.action_chains import ActionChains
    from selenium.webdriver.common.action_chains import ActionChains
    from selenium.webdriver.common.actions.interaction import KEY
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    import datetime
    import sys
    import subprocess
    import time
    import socket
    init()
    num=random.randint(2122370000, 2122379999)
    num=str(num)
    import platform
    import uuid

    # Generar un nuevo UUID aleatorio
    id_dispositivo = str(uuid.uuid4())

    #print(f"{id_dispositivo}")
    # Obtener el nombre de la máquina
    nombre_maquina = socket.gethostname()

    UUID = subprocess.check_output('wmic csproduct get UUID').decode().split('\n')[1].strip()
    def verificar_fecha_vencimiento(fecha_de_vencimiento):
        fecha_actual = datetime.datetime.now()
        if fecha_actual > fecha_de_vencimiento:
            print()
            print()
            print()
            print()
            print(colored('         TIEMPO AGOTADO','yellow'))
            print()
            print(colored(' ID DEL USUARIO','yellow'))
            print()
            print('                                 '+nombre_maquina)
            print()
            while True:
                time.sleep(999999)
                exit()
            

    # Define la fecha de vencimiento (año, mes, día)
    fecha_de_vencimiento = datetime.datetime(2024, 9, 24)

    # Verifica la fecha de vencimiento antes de ejecutar el código principal
    verificar_fecha_vencimiento(fecha_de_vencimiento)

    # Coloca el código principal de tu script aquí
    print()
    print()
    print(colored('  BIENVENIDO','green'))
    #print()
    #print()
    print('  '+nombre_maquina)
    print()
    print(colored('  IP maquina','green'))
    print('  '+f"{direccion_ip}")
    print()
    time.sleep(4)

    import sys
    import os
    import traceback
    import logging
    import pyautogui
    #os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = '1'
    #sys.stderr = open(os.devnull, 'w')# Desactivar la salida de errores a la consola
    import subprocess 
    import time  # Importa el módulo time para añadir un retraso en el bucle.

    import subprocess
    import requests

    def obtener_uuid_de_maquina():
        try:
            # Obtener el UUID de la máquina actual
            UUID = subprocess.check_output('wmic csproduct get UUID').decode().split('\n')[1].strip()
            return UUID
        except Exception as e:
            print("No se pudo obtener el UUID de la máquina:", str(e))
            return None

    def verificar_maquina_permitida():
        try:
            # Obtener el UUID de la máquina actual
            UUID = obtener_uuid_de_maquina()

            if UUID is None:
                return False

            # URL del formulario de Google Forms
            form_url = 'https://docs.google.com/forms/d/1dGeDWEebstMklaoGDm4v-l64HXdFXfQR7dRLb5jEaTM/viewanalytics'  # Reemplaza con la URL de tu formulario

            # Enviar una solicitud HTTP GET al formulario para obtener las respuestas
            response = requests.get(form_url)

            if response.status_code == 200:
                respuestas_formulario = response.text

                # Verificar si el UUID de la máquina está en las respuestas del formulario
                if UUID in respuestas_formulario:
                    return True
                else:
                    return False
            else:
                print("")
                return False
        except Exception as e:
            print("Error al verificar la máquina permitida:", str(e))
            return False

    # Verificar si la máquina actual está autorizada al inicio del script
    if verificar_maquina_permitida():
        print(colored('  DISPOSITIVO AUTORIZADO','green'))
        time.sleep(3)
        print()
        print('  iniciando')
        print()
    else:
        print(colored('  DISPOSITIVO NO AUTORIZADO','red'))
        time.sleep(240)
        exit()

import json
import os
import keyboard
import time
from datetime import datetime, timedelta
from termcolor import colored
from colorama import init
import ctypes

def set_console_maximized():
    hwnd = ctypes.windll.kernel32.GetConsoleWindow()
    if hwnd != 0:
        ctypes.windll.user32.ShowWindow(hwnd, 3)  # 3 significa SW_MAXIMIZE

if __name__ == "__main__":
    set_console_maximized()

init(autoreset=True)

class Usuario:
    def __init__(self, nombre, apellido, cedula, cel, direccion, fiador=None, deuda_total=0, abonos=None, prestamos=None):
        self.nombre = nombre
        self.apellido = apellido
        self.cedula = cedula
        self.cel = cel
        self.direccion = direccion
        self.fiador = fiador
        self.deuda_total = deuda_total
        self.abonos = abonos or []
        self.prestamos = prestamos or []

    def recibir_entrega(self, monto, plazo, tasa_interes):
        interes = monto * (tasa_interes / 100) * (plazo / 30)
        deuda_actual = monto + interes
        fecha_actual = datetime.now()
        fecha_vencimiento = fecha_actual + timedelta(days=plazo)
        self.deuda_total += deuda_actual
        fecha = fecha_actual.strftime("%Y-%m-%d %H:%M:%S")
        fecha_vencimiento_str = fecha_vencimiento.strftime("%Y-%m-%d %H:%M:%S")
        self.prestamos.append((fecha, monto, fecha_vencimiento_str))
        print(f"  Se entregaron ${monto} a {colored(self.nombre, 'yellow')} {colored(self.apellido, 'yellow')}. Deuda actual (con {tasa_interes}% de interés): ${deuda_actual:.0f}. Deuda total: {colored(f'${self.deuda_total:.0f}', 'red')}")
        print(f"  Fecha de vencimiento del préstamo: {colored(fecha_vencimiento_str, 'red')}")
        self.guardar_datos()

    def realizar_pago(self, monto):
        if monto <= self.deuda_total:
            self.deuda_total -= monto
            fecha_pago = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.abonos.append((fecha_pago, monto))
            print(f"  Se realizó un {colored('pago', 'green')} de ${monto:.0f}. Deuda total actual: {colored(f'${self.deuda_total:.0f}', 'red')}")
            self.guardar_datos()
        else:
            print(f"  No se puede realizar el pago. El monto ingresado es mayor que la deuda total actual.")

    def dias_restantes_vencimiento(self):
        if self.prestamos:
            _, _, fecha_vencimiento_str = self.prestamos[-1]  # Tomamos el último préstamo
            fecha_vencimiento = datetime.strptime(fecha_vencimiento_str, "%Y-%m-%d %H:%M:%S")
            dias_restantes = (fecha_vencimiento - datetime.now()).days
            return dias_restantes if dias_restantes > 0 else 0
        return 0

    def mostrar_datos(self):
        print(f"\n  Nombre: {colored(self.nombre, 'yellow')} {colored(self.apellido, 'yellow')}")
        print(f"  Cédula: {self.cedula}")
        print(f"  Celular: {self.cel}")
        print(f"  Dirección: {self.direccion}")
        if self.fiador:
            print(f"  Fiador: {self.fiador}")
        print(f"  Deuda: {colored(f'${self.deuda_total:.0f}', 'red')}")
        print(f"  Días restantes para vencer la deuda: {colored(self.dias_restantes_vencimiento(), 'green')}")
        print(f"  Días asignados para pagar: {colored(self.obtener_dias_asignados(), 'yellow')}")
        print("  Abonos realizados:")
        for fecha, abono in self.abonos:
            print(f"    Fecha: {fecha}, {colored(f'Abono: ${abono:.0f}', 'green')}")
        print("  Préstamos realizados:")
        for fecha, monto, fecha_vencimiento in self.prestamos:
            print(f"    Fecha: {fecha}, {colored(f'Préstamo: ${monto:.0f}', 'yellow')}, Fecha de vencimiento: {colored(fecha_vencimiento, 'red')}")

    def obtener_dias_asignados(self):
        if self.prestamos:
            fecha_inicio = datetime.strptime(self.prestamos[-1][0], "%Y-%m-%d %H:%M:%S")
            fecha_vencimiento = datetime.strptime(self.prestamos[-1][2], "%Y-%m-%d %H:%M:%S")
            return (fecha_vencimiento - fecha_inicio).days
        else:
            return 0

    def obtener_pagos_en_fecha(self, fecha):
        return [abono for fecha_abono, abono in self.abonos if fecha_abono.startswith(fecha)]

    def obtener_prestamos_en_fecha(self, fecha):
        return [(fecha_prestamo, monto, fecha_vencimiento) for fecha_prestamo, monto, fecha_vencimiento in self.prestamos if fecha_prestamo.startswith(fecha)]



    def es_moroso(self):
        hoy = datetime.now()
        for _, _, fecha_vencimiento in self.prestamos:
            fecha_vencimiento = datetime.strptime(fecha_vencimiento, "%Y-%m-%d %H:%M:%S")
            if fecha_vencimiento < hoy and self.deuda_total > 0:
                return True
        return False

    def guardar_datos(self):
        guardar_datos_en_json('usuarios.json', lista_usuarios)

def cargar_datos_desde_json(nombre_archivo):
    try:
        with open(nombre_archivo, 'r') as file:
            datos = json.load(file)
            return [Usuario(**usuario_data) for usuario_data in datos]
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def guardar_datos_en_json(nombre_archivo, lista_usuarios):
    datos_para_guardar = [usuario.__dict__ for usuario in lista_usuarios]
    with open(nombre_archivo, 'w') as file:
        json.dump(datos_para_guardar, file, indent=2)

def agregar_usuario(lista_usuarios, nombre, apellido, cedula, cel, direccion, fiador=None):
    nuevo_usuario = Usuario(nombre, apellido, cedula, cel, direccion, fiador)
    lista_usuarios.append(nuevo_usuario)
    print(f"  Usuario {colored(nombre, 'yellow')} {colored(apellido, 'yellow')} agregado con éxito.")
    nuevo_usuario.guardar_datos()

def mostrar_usuarios_en_columnas(lista_usuarios):
    column_width = os.get_terminal_size().columns // 3
    for i in range(0, len(lista_usuarios), 3):
        usuarios_columna = lista_usuarios[i:i + 3]
        for usuario in usuarios_columna:
            usuario.mostrar_datos()
            print("-" * column_width)

def resumen_financiero_por_fecha(lista_usuarios, fecha):
    total_deuda = sum(usuario.deuda_total for usuario in lista_usuarios)
    total_pagos = sum(sum(usuario.obtener_pagos_en_fecha(fecha)) for usuario in lista_usuarios)
    total_prestamos = sum(sum(prestamo[1] for prestamo in usuario.obtener_prestamos_en_fecha(fecha)) for usuario in lista_usuarios)

    print(f"\n  Resumen financiero para la fecha {fecha}:")
    print(f"  Total préstamos realizados: {colored(f'${total_prestamos:.0f}', 'yellow')}")
    print(f"  Total pagos recibidos: {colored(f'${total_pagos:.0f}', 'green')}")
    print(f"  Total deuda actual: {colored(f'${total_deuda:.0f}', 'red')}")


def informe_global(lista_usuarios):
    print("\n  Informe Global:")
    total_usuarios = len(lista_usuarios)
    total_deuda = sum(usuario.deuda_total for usuario in lista_usuarios)
    total_abonos = sum(sum(abono[1] for abono in usuario.abonos) for usuario in lista_usuarios)
    total_prestamos = sum(sum(prestamo[1] for prestamo in usuario.prestamos) for usuario in lista_usuarios)

    print(f"  Total de usuarios: {colored(total_usuarios, 'yellow')}")
    print(f"  Total deuda: {colored(f'${total_deuda:.0f}', 'red')}")
    print(f"  Total abonos realizados: {colored(f'${total_abonos:.0f}', 'green')}")
    print(f"  Total préstamos realizados: {colored(f'${total_prestamos:.0f}', 'yellow')}")

# ...

def opcion_usuarios_morosos(lista_usuarios):
    morosos = [usuario for usuario in lista_usuarios if usuario.es_moroso()]
    if morosos:
        print("\n  Usuarios Morosos:")
        for moroso in morosos:
            print(f"\n=== {colored(f'{moroso.nombre} {moroso.apellido}', 'red')} ===")
            print(f"  Deuda a la fecha: {colored(f'${moroso.deuda_total:.0f}', 'red')}")
            print(f"  Días restantes para vencer la deuda: {colored(moroso.dias_restantes_vencimiento(), 'yellow')}")
            print(f"  Abonos realizados:")
            for fecha, abono in moroso.abonos:
                print(f"    Fecha: {fecha}, {colored(f'Abono: ${abono:.0f}', 'green')}")
            print(f"  Préstamos realizados:")
            for fecha, monto, fecha_vencimiento in moroso.prestamos:
                print(f"    Fecha: {fecha}, {colored(f'Préstamo: ${monto:.0f}', 'yellow')}, Fecha de vencimiento: {colored(fecha_vencimiento, 'red')}")
    else:
        print("\n  No hay usuarios morosos en la fecha actual.")


def clear_console():
    if os.name == 'posix':
        _ = os.system('clear')  # Para sistemas tipo Unix (Linux y macOS)
    else:
        _ = os.system('cls')  # Para Windows

archivo_json = 'usuarios.json'
lista_usuarios = cargar_datos_desde_json(archivo_json)

def editar_usuario(usuario):
    print("  Editar Usuario:")
    print("  Deja en blanco para mantener el valor actual.")
    nuevo_nombre = input(f"    Nuevo Nombre ({usuario.nombre}): ").strip() or usuario.nombre
    nuevo_apellido = input(f"    Nuevo Apellido ({usuario.apellido}): ").strip() or usuario.apellido
    nueva_cedula = input(f"    Nueva Cédula ({usuario.cedula}): ").strip() or usuario.cedula
    nuevo_cel = input(f"    Nuevo Celular ({usuario.cel}): ").strip() or usuario.cel
    nueva_direccion = input(f"    Nueva Dirección ({usuario.direccion}): ").strip() or usuario.direccion
    nuevo_fiador = input(f"    Nuevo Fiador ({usuario.fiador}): ").strip() or usuario.fiador

    usuario.nombre = nuevo_nombre
    usuario.apellido = nuevo_apellido
    usuario.cedula = nueva_cedula
    usuario.cel = nuevo_cel
    usuario.direccion = nueva_direccion
    usuario.fiador = nuevo_fiador

    usuario.guardar_datos()
    print(f"\n  Usuario {colored(usuario.nombre, 'yellow')} {colored(usuario.apellido, 'yellow')} editado con éxito.")

def eliminar_usuario(usuario, lista_usuarios):
    confirmacion = input(f"\n  ¿Estás seguro que deseas eliminar a {colored(usuario.nombre, 'yellow')} {colored(usuario.apellido, 'yellow')}? (S/N): ")
    if confirmacion.upper() == 'S':
        lista_usuarios.remove(usuario)
        usuario.guardar_datos()
        print(f"\n  Usuario {colored(usuario.nombre, 'yellow')} {colored(usuario.apellido, 'yellow')} eliminado con éxito.")


while True:
    clear_console()
    print(colored("""
                                                        *********************************
                                                        *                               *
                                                        *          Bienvenido a         *
                                                        *      INVERSIONES PARADISE     *
                                                        *                               *
                                                        *********************************
                                                        """,'cyan'))
    
    print()
    print("\n  1. Agregar usuario")
    print(colored('  2. Realizar préstamo','yellow'))
    print(colored('  3. Realizar pago','green'))
    print(colored('  4. Lista de usuarios','blue'))
    print(colored('  5. Buscar','yellow'))
    print(colored('  6. Informe por fecha','red'))
    print(colored('  7. Informe Global','magenta'))
    print(colored('  8. Mostrar Usuarios Morosos','red'))
    print(colored('  9. Editar usuario','cyan'))  # Nueva opción
    print(colored(' 10. Eliminar usuario','red'))  # Nueva opción
    print()
    print(colored(' 11. Salir','red'))
    print("\n")
    
    opcion = input("  Selecciona una opción: ")

    if opcion == '1':
        nombre = input("    Nombre: ")
        apellido = input("    Apellidos: ")
        cedula = input("    Cedula: ")
        cel = input("    Celular: ")
        direccion = input("    Dirección: ")
        fiador = input("    Fiador (opcional): ")
        agregar_usuario(lista_usuarios, nombre, apellido, cedula, cel, direccion, fiador)
        input("\n  Presione Enter para volver al menú.")

        
    elif opcion == '2':
        nombre_apellido = input("    Nombre y apellido del usuario al que se le entregará dinero: ")
        usuarios_encontrados = [u for u in lista_usuarios if f"{u.nombre} {u.apellido}" == nombre_apellido]
    
        if usuarios_encontrados:
            print(colored('Usuarios encontrados','green'))
            for i, usuario in enumerate(usuarios_encontrados, 1):
                print(f"{i}. {usuario.nombre} {usuario.apellido}")
        
            seleccion = int(input("\nSeleccione el usuario (número): "))
            if 1 <= seleccion <= len(usuarios_encontrados):
                usuario = usuarios_encontrados[seleccion - 1]
                monto = float(input("    Monto del préstamo: "))
                plazo = int(input("    Plazo en días para pagar el crédito: "))
                tasa_interes = float(input("    Tasa de interés mensual (%): "))
                usuario.recibir_entrega(monto, plazo, tasa_interes)
            else:
                print("Selección no válida.")
        else:
            print(f"No se encontró al usuario {colored(nombre_apellido, 'yellow')}.")
    
        input("\n  Presione Enter para volver al menú.")


    elif opcion == '3':
        nombre_apellido = input("    Nombre y apellido del usuario que realizará el pago: ")
        usuarios_encontrados = [u for u in lista_usuarios if f"{u.nombre} {u.apellido}" == nombre_apellido]
    
        if usuarios_encontrados:
            print(colored('Usuarios encontrados','green'))
            for i, usuario in enumerate(usuarios_encontrados, 1):
                print(f"{i}. {usuario.nombre} {usuario.apellido}")
        
            seleccion = int(input("\nSeleccione el usuario (número): "))
            if 1 <= seleccion <= len(usuarios_encontrados):
                usuario = usuarios_encontrados[seleccion - 1]
                monto = float(input("    Monto a pagar: "))
                usuario.realizar_pago(monto)
            else:
                print("Selección no válida.")
        else:
            print(f"No se encontró al usuario {colored(nombre_apellido, 'yellow')}.")
    
        input("\n  Presione Enter para volver al menú.")


            
    elif opcion == '4':
        mostrar_usuarios_en_columnas(lista_usuarios)
        input("\n  Presione Enter para volver al menú.")

    elif opcion == '5':
        nombre_apellido = input("    Nombre y apellido del usuario que desea visualizar: ")
        usuarios_encontrados = [u for u in lista_usuarios if f"{u.nombre} {u.apellido}" == nombre_apellido]
    
        if usuarios_encontrados:
            print(colored('Usuarios encontrados','green'))
            for i, usuario in enumerate(usuarios_encontrados, 1):
                print(f"{i}. {usuario.nombre} {usuario.apellido}")
        
            seleccion = int(input("\nSeleccione el usuario (número): "))
            if 1 <= seleccion <= len(usuarios_encontrados):
                usuario = usuarios_encontrados[seleccion - 1]
                usuario.mostrar_datos()
            else:
                print("Selección no válida.")
        else:
            print(f"No se encontró al usuario {colored(nombre_apellido, 'yellow')}.")
    
        input("\n  Presione Enter para volver al menú.")


        
    elif opcion == '6':
        fecha = input("    Ingresa la fecha (formato YYYY-MM-DD): ")
        resumen_financiero_por_fecha(lista_usuarios, fecha)
        input("\n  Presione Enter para volver al menú.")
    elif opcion == '7':
        informe_global(lista_usuarios)
        input("\n  Presione Enter para volver al menú.")
        
    elif opcion == '8':
        opcion_usuarios_morosos(lista_usuarios)  # Cambia esta línea
        input("\n  Presione Enter para volver al menú.")        
        
    elif opcion == '9':
        nombre_apellido = input("\n    Nombre y apellido del usuario que deseas editar: ")
        usuarios_encontrados = [u for u in lista_usuarios if f"{u.nombre} {u.apellido}" == nombre_apellido]
    
        if usuarios_encontrados:
            print(colored('Usuarios encontrados','green'))
            for i, usuario in enumerate(usuarios_encontrados, 1):
                print(f"{i}. {usuario.nombre} {usuario.apellido}")
        
            seleccion = int(input("\nSeleccione el usuario (número): "))
            if 1 <= seleccion <= len(usuarios_encontrados):
                usuario_a_editar = usuarios_encontrados[seleccion - 1]
                editar_usuario(usuario_a_editar)
            else:
                print("Selección no válida.")
        else:
            print(f"No se encontró al usuario {colored(nombre_apellido, 'yellow')}.")
    
        input("\n  Presione Enter para volver al menú.")


            
    elif opcion == '10':
        nombre_apellido = input("\n    Nombre y apellido del usuario que deseas eliminar: ")
        usuarios_encontrados = [u for u in lista_usuarios if f"{u.nombre} {u.apellido}" == nombre_apellido]
    
        if usuarios_encontrados:
            print(colored('Usuarios encontrados','green'))
            for i, usuario in enumerate(usuarios_encontrados, 1):
                print(f"{i}. {usuario.nombre} {usuario.apellido}")
        
            seleccion = int(input("\nSeleccione el usuario (número): "))
            if 1 <= seleccion <= len(usuarios_encontrados):
                usuario_a_eliminar = usuarios_encontrados[seleccion - 1]
                eliminar_usuario(usuario_a_eliminar, lista_usuarios)
                print(f"\n  Presione Enter para volver al menú.")
            else:
                print("Selección no válida.")
        else:
            print(f"No se encontró al usuario {colored(nombre_apellido, 'yellow')}.")
    
        input("\n  Presione Enter para volver al menú.")


            
    elif opcion == '11':
        break

